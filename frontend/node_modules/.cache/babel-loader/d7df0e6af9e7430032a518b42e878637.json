{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\n\nvar model_1 = require(\"./model\");\n\nvar GAstVisitor =\n/** @class */\nfunction () {\n  function GAstVisitor() {}\n\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n\n      /* istanbul ignore next */\n\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRule = function (node) {};\n\n  return GAstVisitor;\n}();\n\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\Rue's Final Project\\frontend\\node_modules\\@chevrotain\\gast\\src\\visitor.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAcA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CA6DC;;AA5DQ,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,IAAb,EAA8B;AAC5B,QAAM,OAAO,GAAQ,IAArB;;AACA,YAAQ,OAAO,CAAC,WAAhB;AACE,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,MAAL;AACE,eAAO,KAAK,WAAL,CAAiB,OAAjB,CAAP;;AACF,WAAK,OAAA,CAAA,mBAAL;AACE,eAAO,KAAK,wBAAL,CAA8B,OAA9B,CAAP;;AACF,WAAK,OAAA,CAAA,gCAAL;AACE,eAAO,KAAK,qCAAL,CAA2C,OAA3C,CAAP;;AACF,WAAK,OAAA,CAAA,uBAAL;AACE,eAAO,KAAK,4BAAL,CAAkC,OAAlC,CAAP;;AACF,WAAK,OAAA,CAAA,UAAL;AACE,eAAO,KAAK,eAAL,CAAqB,OAArB,CAAP;;AACF,WAAK,OAAA,CAAA,WAAL;AACE,eAAO,KAAK,gBAAL,CAAsB,OAAtB,CAAP;;AACF,WAAK,OAAA,CAAA,QAAL;AACE,eAAO,KAAK,aAAL,CAAmB,OAAnB,CAAP;;AACF,WAAK,OAAA,CAAA,IAAL;AACE,eAAO,KAAK,SAAL,CAAe,OAAf,CAAP;;AACF;;AACA;AACE,cAAM,KAAK,CAAC,sBAAD,CAAX;AAvBJ;AAyBD,GA3BM;AA6BP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAA+B,CAAS,CAAjC;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAuC,CAAS,CAAzC;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,wBAAA,GAAP,UAAgC,IAAhC,EAAyD,CAAS,CAA3D;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,qCAAA,GAAP,UACE,IADF,EACwC,CAC/B,CAFF;AAIP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,4BAAA,GAAP,UAAoC,IAApC,EAAiE,CAAS,CAAnE;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,IAAxB,EAAyC,CAAS,CAA3C;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAAmC,CAAS,CAArC;AAEP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAA2B,CAAS,CAA7B;;AACT,SAAA,WAAA;AAAC,CA7DD,EAAA;;AAAsB,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./model\"\nimport { IProduction } from \"@chevrotain/types\"\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny)\n      case Alternative:\n        return this.visitAlternative(nodeAny)\n      case Option:\n        return this.visitOption(nodeAny)\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny)\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny)\n      case Repetition:\n        return this.visitRepetition(nodeAny)\n      case Alternation:\n        return this.visitAlternation(nodeAny)\n      case Terminal:\n        return this.visitTerminal(nodeAny)\n      case Rule:\n        return this.visitRule(nodeAny)\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\")\n    }\n  }\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternative(node: Alternative): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitOption(node: Option): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetition(node: Repetition): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator\n  ): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternation(node: Alternation): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitTerminal(node: Terminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRule(node: Rule): any {}\n}\n"]},"metadata":{},"sourceType":"script"}