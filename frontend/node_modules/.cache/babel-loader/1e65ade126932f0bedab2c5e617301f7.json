{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\n\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, keys_1.default)(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n}\n\nexports.defaultVisit = defaultVisit;\n\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, isArray_1.default)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if ((0, isUndefined_1.default)(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n\n      if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n        var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") + \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\n\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\n\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, forEach_1.default)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\n\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\n\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexports.validateVisitor = validateVisitor;\n\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n    return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n  });\n  var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n    return {\n      msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n      type: CstVisitorDefinitionError.MISSING_METHOD,\n      methodName: currRuleName\n    };\n  });\n  return (0, compact_1.default)(errors);\n}\n\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\n\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if ((0, isFunction_1.default)(visitorInstance[prop]) && !(0, includes_1.default)(VALID_PROP_NAMES, prop) && !(0, includes_1.default)(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\".concat(prop, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor\\n\") + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}\n\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\Rue's Final Project\\frontend\\node_modules\\chevrotain\\src\\parse\\cst\\cst_visitor.ts"],"names":[],"mappings":"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","sourcesContent":["import isEmpty from \"lodash/isEmpty\"\nimport compact from \"lodash/compact\"\nimport isArray from \"lodash/isArray\"\nimport map from \"lodash/map\"\nimport forEach from \"lodash/forEach\"\nimport filter from \"lodash/filter\"\nimport keys from \"lodash/keys\"\nimport isFunction from \"lodash/isFunction\"\nimport isUndefined from \"lodash/isUndefined\"\nimport includes from \"lodash/includes\"\nimport { defineNameProp } from \"../../lang/lang_extensions\"\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\"\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx)\n  const childrenNamesLength = childrenNames.length\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i]\n    const currChildArray = ctx[currChildName]\n    const currChildArrayLength = currChildArray.length\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j]\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param)\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[]\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\")\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0]\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined\n      }\n\n      return this[cstNode.name](cstNode.children, param)\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg\n        )\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`\n        )\n      }\n    }\n  }\n\n  derivedConstructor.prototype = semanticProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  derivedConstructor._RULE_NAMES = ruleNames\n\n  return derivedConstructor\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\")\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype)\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit\n  })\n\n  derivedConstructor.prototype = withDefaultsProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  return derivedConstructor\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string\n  type: CstVisitorDefinitionError\n  methodName: string\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n  const redundantErrors = validateRedundantMethods(visitorInstance, ruleNames)\n\n  return missingErrors.concat(redundantErrors)\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false\n  })\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      }\n    }\n  )\n\n  return compact<IVisitorDefinitionError>(errors)\n}\n\nconst VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"]\nexport function validateRedundantMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const errors = []\n\n  for (const prop in visitorInstance) {\n    if (\n      isFunction((visitorInstance as any)[prop]) &&\n      !includes(VALID_PROP_NAMES, prop) &&\n      !includes(ruleNames, prop)\n    ) {\n      errors.push({\n        msg:\n          `Redundant visitor method: <${prop}> on ${<any>(\n            visitorInstance.constructor.name\n          )} CST Visitor\\n` +\n          `There is no Grammar Rule corresponding to this method's name.\\n`,\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      })\n    }\n  }\n  return errors\n}\n"]},"metadata":{},"sourceType":"script"}